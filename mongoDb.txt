Microsoft Windows [Version 10.0.19044.2486]
(c) Microsoft Corporation. All rights reserved.

C:\Users\DELL>mongosh --help

  $ mongosh [options] [db address] [file names (ending in .js or .mongodb)]

  Options:

    -h, --help                                 Show this usage information
    -f, --file [arg]                           Load the specified mongosh script
        --host [arg]                           Server to connect to
        --port [arg]                           Port to connect to
        --version                              Show version information
        --verbose                              Increase the verbosity of the output of the shell
        --quiet                                Silence output from the shell during the connection process
        --shell                                Run the shell after executing files
        --nodb                                 Don't connect to mongod on startup - no 'db address' [arg] expected
        --norc                                 Will not run the '.mongoshrc.js' file on start up
        --eval [arg]                           Evaluate javascript
        --json[=canonical|relaxed]             Print result of --eval as Extended JSON, including errors
        --retryWrites[=true|false]             Automatically retry write operations upon transient network errors (Default: true)

  Authentication Options:

    -u, --username [arg]                       Username for authentication
    -p, --password [arg]                       Password for authentication
        --authenticationDatabase [arg]         User source (defaults to dbname)
        --authenticationMechanism [arg]        Authentication mechanism
        --awsIamSessionToken [arg]             AWS IAM Temporary Session Token ID
        --gssapiServiceName [arg]              Service name to use when authenticating using GSSAPI/Kerberos
        --sspiHostnameCanonicalization [arg]   Specify the SSPI hostname canonicalization (none or forward, available on Windows)
        --sspiRealmOverride [arg]              Specify the SSPI server realm (available on Windows)

  TLS Options:

        --tls                                  Use TLS for all connections
        --tlsCertificateKeyFile [arg]          PEM certificate/key file for TLS
        --tlsCertificateKeyFilePassword [arg]  Password for key in PEM file for TLS
        --tlsCAFile [arg]                      Certificate Authority file for TLS
        --tlsAllowInvalidHostnames             Allow connections to servers with non-matching hostnames
        --tlsAllowInvalidCertificates          Allow connections to servers with invalid certificates
        --tlsCertificateSelector [arg]         TLS Certificate in system store (Windows and macOS only)
        --tlsCRLFile [arg]                     Specifies the .pem file that contains the Certificate Revocation List
        --tlsDisabledProtocols [arg]           Comma separated list of TLS protocols to disable [TLS1_0,TLS1_1,TLS1_2]
        --tlsUseSystemCA                       Load the operating system trusted certificate list
        --tlsFIPSMode                          Enable the system TLS library's FIPS mode

  API version options:

        --apiVersion [arg]                     Specifies the API version to connect with
        --apiStrict                            Use strict API version mode
        --apiDeprecationErrors                 Fail deprecated commands for the specified API version

  FLE Options:

        --awsAccessKeyId [arg]                 AWS Access Key for FLE Amazon KMS
        --awsSecretAccessKey [arg]             AWS Secret Key for FLE Amazon KMS
        --awsSessionToken [arg]                Optional AWS Session Token ID
        --keyVaultNamespace [arg]              database.collection to store encrypted FLE parameters
        --kmsURL [arg]                         Test parameter to override the URL of the KMS endpoint

  DB Address Examples:

        foo                                    Foo database on local machine
        192.168.0.5/foo                        Foo database on 192.168.0.5 machine
        192.168.0.5:9999/foo                   Foo database on 192.168.0.5 machine on port 9999
        mongodb://192.168.0.5:9999/foo         Connection string URI can also be used

  File Names:

        A list of files to run. Files must end in .js and will exit after unless --shell is specified.

  Examples:

        Start mongosh using 'ships' database on specified connection string:
        $ mongosh mongodb://192.168.0.5:9999/ships

  For more information on usage: https://docs.mongodb.com/mongodb-shell.

C:\Users\DELL>mongosh
Current Mongosh Log ID: 63ef79754f5dc064905340f0
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.7.1
Using MongoDB:          6.0.4
Using Mongosh:          1.7.1

For mongosh info see: https://docs.mongodb.com/mongodb-shell/


To help improve our products, anonymous usage data is collected and sent to MongoDB periodically (https://www.mongodb.com/legal/privacy-policy).
You can opt-out by running the disableTelemetry() command.

------
   The server generated these startup warnings when booting
   2023-02-17T18:09:58.371+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

------
   Enable MongoDB's free cloud-based monitoring service, which will then receive and display
   metrics about your deployment (disk utilization, CPU, operation statistics, etc).

   The monitoring data will be available on a MongoDB website with a unique URL accessible to you
   and anyone you share the URL with. MongoDB may use this information to make product
   improvements and to suggest MongoDB products and deployment options to you.

   To enable free monitoring, run the following command: db.enableFreeMonitoring()
   To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
------

test> db
test
test> use test
already on db test
test> use db
switched to db db
db> use test
switched to db test
test> show dbs
admin    40.00 KiB
config  108.00 KiB
local    72.00 KiB
test> use db
switched to db db
db> db.db.insert({"name":"shivani","age":22,"location":"Maharashtra"})
DeprecationWarning: Collection.insert() is deprecated. Use insertOne, insertMany, or bulkWrite.
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("63ef7f66e25389d3f2a7d1f8") }
}
db> db.db.find()
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 22,
    location: 'Maharashtra'
  }
]
db> db.db.find().pretty()
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 22,
    location: 'Maharashtra'
  }
]
db> db.db.insert({"name":"anjali","age":23,"location":"Maharashtra"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("63ef8125e25389d3f2a7d1f9") }
}
db> db.db.find()
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 22,
    location: 'Maharashtra'
  },
  {
    _id: ObjectId("63ef8125e25389d3f2a7d1f9"),
    name: 'anjali',
    age: 23,
    location: 'Maharashtra'
  }
]
db> db.db.find({}, _id:0)
Uncaught:
SyntaxError: Unexpected token, expected "," (1:18)

> 1 | db.db.find({}, _id:0)
    |                   ^
  2 |

db> db.db.find({}, _id:0).pretty()
Uncaught:
SyntaxError: Unexpected token, expected "," (1:18)

> 1 | db.db.find({}, _id:0).pretty()
    |                   ^
  2 |

db> db.db.find()
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 22,
    location: 'Maharashtra'
  },
  {
    _id: ObjectId("63ef8125e25389d3f2a7d1f9"),
    name: 'anjali',
    age: 23,
    location: 'Maharashtra'
  }
]
db> db.db.find().pretty()
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 22,
    location: 'Maharashtra'
  },
  {
    _id: ObjectId("63ef8125e25389d3f2a7d1f9"),
    name: 'anjali',
    age: 23,
    location: 'Maharashtra'
  }
]
db> db.db.find()
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 22,
    location: 'Maharashtra'
  },
  {
    _id: ObjectId("63ef8125e25389d3f2a7d1f9"),
    name: 'anjali',
    age: 23,
    location: 'Maharashtra'
  }
]
db> db.db.find({name:"shivani"})
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 22,
    location: 'Maharashtra'
  }
]
db> db.db.find({age:{$lt:23}})
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 22,
    location: 'Maharashtra'
  }
]
db> db.db.find({age:{$gt:22}})
[
  {
    _id: ObjectId("63ef8125e25389d3f2a7d1f9"),
    name: 'anjali',
    age: 23,
    location: 'Maharashtra'
  }
]
db> db.db.find({age:{$gte:22}})
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 22,
    location: 'Maharashtra'
  },
  {
    _id: ObjectId("63ef8125e25389d3f2a7d1f9"),
    name: 'anjali',
    age: 23,
    location: 'Maharashtra'
  }
]
db> db.db.find({age:{$lte:22}})
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 22,
    location: 'Maharashtra'
  }
]
db> db.db.find({age:{$lte:23}})
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 22,
    location: 'Maharashtra'
  },
  {
    _id: ObjectId("63ef8125e25389d3f2a7d1f9"),
    name: 'anjali',
    age: 23,
    location: 'Maharashtra'
  }
]
db> db.db.update({age:22},{$set:{age:23}})
DeprecationWarning: Collection.update() is deprecated. Use updateOne, updateMany, or bulkWrite.
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
db> db.db.find()
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 23,
    location: 'Maharashtra'
  },
  {
    _id: ObjectId("63ef8125e25389d3f2a7d1f9"),
    name: 'anjali',
    age: 23,
    location: 'Maharashtra'
  }
]
db> db.db.update({age:22},{$set:{isMarried:false}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}
db> db.db.find()
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 23,
    location: 'Maharashtra'
  },
  {
    _id: ObjectId("63ef8125e25389d3f2a7d1f9"),
    name: 'anjali',
    age: 23,
    location: 'Maharashtra'
  }
]
db> db.db.update({age:23},{$set:{isMarried:false}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
db> db.db.find()
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 23,
    location: 'Maharashtra',
    isMarried: false
  },
  {
    _id: ObjectId("63ef8125e25389d3f2a7d1f9"),
    name: 'anjali',
    age: 23,
    location: 'Maharashtra'
  }
]
db> db.db.update({age:23},{$set:{isMarried:false}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 0,
  upsertedCount: 0
}
db> db.db.find()
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 23,
    location: 'Maharashtra',
    isMarried: false
  },
  {
    _id: ObjectId("63ef8125e25389d3f2a7d1f9"),
    name: 'anjali',
    age: 23,
    location: 'Maharashtra'
  }
]
db> db.db.update({age:23},{$set:{isMarried:false}})
db> db.db.update({_id:ObjectId("63ef8125e25389d3f2a7d1f9")},{$set:{isMarried:false}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
db> db.db.find()
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 23,
    location: 'Maharashtra',
    isMarried: false
  },
  {
    _id: ObjectId("63ef8125e25389d3f2a7d1f9"),
    name: 'anjali',
    age: 23,
    location: 'Maharashtra',
    isMarried: false
  }
]
db> db.db.remove({_id:ObjectId("63ef8125e25389d3f2a7d1f9")})
DeprecationWarning: Collection.remove() is deprecated. Use deleteOne, deleteMany, findOneAndDelete, or bulkWrite.
{ acknowledged: true, deletedCount: 1 }
db> db.db.find()
[
  {
    _id: ObjectId("63ef7f66e25389d3f2a7d1f8"),
    name: 'shivani',
    age: 23,
    location: 'Maharashtra',
    isMarried: false
  }
]
db> db.db.remove({})
{ acknowledged: true, deletedCount: 1 }
db> db.db.find()
